<tool id="dumpSTR" name="DumpSTR - TRTools" version="@TRTOOLS_VERSION@" python_template_version="3.5">
    <description>DumpSTR filters VCF files with TR genotypes, performing call-level and locus-level filtering,
        and outputs a filtered VCF file.</description>

    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements"/>
    
    <command detect_errors="aggressive"><![CDATA[

    ## Inputs
    
    ## Auto-generated command section
    ## TODO: please review and edit this section as needed
    
    ## Inputs
    
    dumpSTR
    --vcf '$main_params.vcf'
    --out '$main_params.out'
    --vcftype $main_params.vcftype

    #if $main_params.zip:
        --zip
    #end if
    
    #if str($filter_opt.min_locus_callrate):
        --min-locus-callrate $filter_opt.min_locus_callrate#end if
    #if str($filter_opt.min_locus_hwep):
        --min-locus-hwep $filter_opt.min_locus_hwep#end if
    #if str($filter_opt.max_locus_het):
        --max-locus-het $filter_opt.max_locus_het#end if

    #if $filter_opt.use_length:
        --use-length
    #end if
    
    
    #if $filter_opt.filter_regions:
        --filter-regions '$filter_opt.filter_regions'
    #end if

    #if $filter_opt.filter_regions_names:
        --filter-regions-names '$filter_opt.filter_regions_names'
    #end if

    #if $filter_opt.filter_hrun:
        --filter-hrun
    #end if

    #if $filter_opt.drop_filtered:
        --drop-filtered
    #end if
    
    
    #if str($filter_call_level.advntr_filters.advntr_min_call_DP):
        --advntr-min-call-DP $filter_call_level.advntr_filters.advntr_min_call_DP#end if
    #if str($filter_call_level.advntr_filters.advntr_max_call_DP):
        --advntr-max-call-DP $filter_call_level.advntr_filters.advntr_max_call_DP#end if
    #if str($filter_call_level.advntr_filters.advntr_min_spanning):
        --advntr-min-spanning $filter_call_level.advntr_filters.advntr_min_spanning#end if
    #if str($filter_call_level.advntr_filters.advntr_min_flanking):
        --advntr-min-flanking $filter_call_level.advntr_filters.advntr_min_flanking#end if
    #if str($filter_call_level.advntr_filters.advntr_min_ML):
        --advntr-min-ML $filter_call_level.advntr_filters.advntr_min_ML#end if
    #if str($filter_call_level.eh_filters.eh_min_call_LC):
        --eh-min-call-LC $filter_call_level.eh_filters.eh_min_call_LC#end if
    #if str($filter_call_level.eh_filters.eh_max_call_LC):
        --eh-max-call-LC $filter_call_level.eh_filters.eh_max_call_LC#end if
    #if str($filter_call_level.gangstr_filters.gangstr_min_call_DP):
        --gangstr-min-call-DP $filter_call_level.gangstr_filters.gangstr_min_call_DP#end if
    #if str($filter_call_level.gangstr_filters.gangstr_max_call_DP):
        --gangstr-max-call-DP $filter_call_level.gangstr_filters.gangstr_max_call_DP#end if
    #if str($filter_call_level.gangstr_filters.gangstr_min_call_Q):
        --gangstr-min-call-Q $filter_call_level.gangstr_filters.gangstr_min_call_Q#end if
    #if str($filter_call_level.gangstr_filters.gangstr_expansion_prob_het):
        --gangstr-expansion-prob-het $filter_call_level.gangstr_filters.gangstr_expansion_prob_het#end if
    #if str($filter_call_level.gangstr_filters.gangstr_expansion_prob_hom):
        --gangstr-expansion-prob-hom $filter_call_level.gangstr_filters.gangstr_expansion_prob_hom#end if
    #if str($filter_call_level.gangstr_filters.gangstr_expansion_prob_total):
        --gangstr-expansion-prob-total $filter_call_level.gangstr_filters.gangstr_expansion_prob_total#end if

    #if $filter_call_level.gangstr_filters.gangstr_filter_span_only:
        --gangstr-filter-span-only
    #end if

    #if $filter_call_level.gangstr_filters.gangstr_filter_spanbound_only:
        --gangstr-filter-spanbound-only
    #end if

    #if $filter_call_level.gangstr_filters.gangstr_filter_badCI:
        --gangstr-filter-badCI
    #end if
   
    
    
    #if str($filter_call_level.hipstr_filters.hipstr_max_call_flank_indel):
        --hipstr-max-call-flank-indel $filter_call_level.hipstr_filters.hipstr_max_call_flank_indel#end if
    #if str($filter_call_level.hipstr_filters.hipstr_max_call_stutter):
        --hipstr-max-call-stutter $filter_call_level.hipstr_filters.hipstr_max_call_stutter#end if
    #if str($filter_call_level.hipstr_filters.hipstr_min_supp_reads):
        --hipstr-min-supp-reads $filter_call_level.hipstr_filters.hipstr_min_supp_reads#end if
    #if str($filter_call_level.hipstr_filters.hipstr_min_call_DP):
        --hipstr-min-call-DP $filter_call_level.hipstr_filters.hipstr_min_call_DP#end if
    #if str($filter_call_level.hipstr_filters.hipstr_max_call_DP):
        --hipstr-max-call-DP $filter_call_level.hipstr_filters.hipstr_max_call_DP#end if
    #if str($filter_call_level.hipstr_filters.hipstr_min_call_Q):
        --hipstr-min-call-Q $filter_call_level.hipstr_filters.hipstr_min_call_Q#end if
    #if str($filter_call_level.popstr_filters.popstr_min_call_DP):
        --popstr-min-call-DP $filter_call_level.popstr_filters.popstr_min_call_DP#end if
    #if str($filter_call_level.popstr_filters.popstr_max_call_DP):
        --popstr-max-call-DP $filter_call_level.popstr_filters.popstr_max_call_DP#end if
    #if str($filter_call_level.popstr_filters.popstr_require_support):
        --popstr-require-support $filter_call_level.popstr_filters.popstr_require_support#end if
    
    ## Outputs
    1> $stdout 2> $stderr
    ]]>
    </command>

    <inputs>
        <section name="main_params" title="Most important parameters" expanded="true">
            <param argument="--vcf" name="vcf" type="data" format="vcf.gz" label="VCF file" help="VCF file to analyze"/>
            <param argument="--out" name="out" type="text" label="Output name prefix"
                   help="Output prefix for files generated"/>
             <param argument="--vcftype" name="vcftype" type="select" label="Variant caller type of input VCF" help="
                        Which type of VCF to restrict the input to, or 'auto' for no restrction (default: auto)">
                <option value="auto">Auto</option>
                <option value="gangstr">GangSTR</option>
                <option value="advntr">Advntr</option>
                <option value="hipstr">HipSTR</option>
                <option value="eh">Expansion hunter</option>
                <option value="popstr">PopSTR</option>
            </param>
            <param argument="--zip" type="boolean" optional="true" label="Zip and index output"
                   help="Output a bgzipped filtered VCF ($out.vcf.gz) and tabix index ($out.vcf.gz.tbi) instead of $out.vcf"/>
            
        </section>
       
        <section name="filter_opt" title="Filter options" expanded="false">
           <param argument="--min-locus-callrate" type="float" optional="true" label="Filters loci with too few calls" help="Filters loci with too few calls" />
           <param argument="--min-locus-hwep" type="float" optional="true" label="Filters loci with low heteroyzgosity" help="    Heterozygosity is equal to:

           1 - âˆ‘ip2i
           
           where p_i is the frequency of allele i" />
           <param argument="--max-locus-het" type="float" optional="true" label="Filters loci with high heterozygosity" help="Filters loci with high heterozygosity" />
           <param argument="--use-length" type="boolean" optional="true" label="Use allele lengths, rather than sequences" help="Use allele lengths, rather than sequences, to compute heterozygosity and HWE (only relevant for HipSTR, which reports sequence level differences in TR alleles)" />
           <param argument="--filter-regions" type="text" optional="true" label="Filter TRs overlapping the specified set of regions." help="BEDFILE[,BEDFILE12,...] Must be used with --filter-regions-names. Can supply a comma-separated list to each to apply multiple region filters. Bed files must be sorted and tabix-indexed." />
           <param argument="--filter-regions-names" type="text" optional="true" label="Filter names for each BED file specified in --filter-regions" help="Filter names for each BED file specified in --filter-regions" />
           <param argument="--filter-hrun" type="boolean" optional="true" label="Filter repeats with long homopolymer runs" help="Only used for HipSTR VCF files otherwise ignored. Filters pentanucleotides with homopolymer runs of 5bp or longer, or hexanucleotides with homopolymer runs of 6bp or longer." />
           <param argument="--drop-filtered" type="boolean" optional="true" label="Do not output loci that were filtered" help="boolean" />

        </section>
        <section name="filter_call_level" title="Call-level filters" expanded="false">
            <section name="advntr_filters" title="AdVNTR call-level filters" expanded="false">
                <param argument="--advntr-min-call-DP" type="integer" optional="true" label="Minimum call coverage. Based on DP field." />
                <param argument="--advntr-max-call-DP" type="integer" optional="true" label="Maximum call coverage. Based on DP field." />
                <param argument="--advntr-min-spanning" type="integer" optional="true" label="Minimum spanning read count (SR field)" />
                <param argument="--advntr-min-flanking" type="integer" optional="true" label="Minimum flanking read count (FR field)" />
                <param argument="--advntr-min-ML" type="float" optional="true" label="Minimum value of maximum likelihood (ML field)" />
            </section>
            <section name="eh_filters" title="ExpansionHunter call-level filters" expanded="false">
                <param argument="--eh-min-call-LC" type="integer" optional="true" label="Minimum call coverage. Based on LC field." />
                <param argument="--eh-max-call-LC" type="integer" optional="true" label="Maximum call coverage. Based on LC field." />
            </section>
            <section name="gangstr_filters" title="GangSTR call-level filters" expanded="false">
                <param argument="--gangstr-min-call-DP" type="integer" optional="true" label="Minimum call coverage. Based on DP field." />
                <param argument="--gangstr-max-call-DP" type="integer" optional="true" label="Maximum call coverage. Based on DP field." />
                <param argument="--gangstr-min-call-Q" type="float" optional="true" label="Minimum call quality score. Based on Q field." />
                <param argument="--gangstr-expansion-prob-het" type="float" optional="true" label="Expansion prob-value threshold (HET)." help="Filters calls with probability of heterozygous expansion less than this. Based on QEXP field." />
                <param argument="--gangstr-expansion-prob-hom" type="float" optional="true" label="Expansion prob-value threshold (HOM)." help="Filters calls with probability of homozygous expansion less than this. Based on QEXP field." />
                <param argument="--gangstr-expansion-prob-total" type="float" optional="true" label="Expansion prob-value threshold.(TOTAL)" help="Filters calls with probability of homozygous or heterozygous expansion less than this. Based on QEXP field." />
                <param argument="--gangstr-filter-span-only" type="boolean" optional="true" label="Filter out all calls that only have spanning read support. Based on RC field." />
                <param argument="--gangstr-filter-spanbound-only" type="boolean" optional="true" label="Filter out all reads except spanning and bounding. Based on RC field." />
                <param argument="--gangstr-filter-badCI" type="boolean" optional="true" label="Filter regions where the ML estimate is not in the CI. Based on REPCN and REPCI fields." />
            </section>
            <section name="hipstr_filters" title="HipSTR call-level filters" expanded="false">
                <param argument="--hipstr-max-call-flank-indel" type="float" optional="true" label="Maximum call flank indel rate. Computed as DFLANKINDEL/DP" />
                <param argument="--hipstr-max-call-stutter" type="float" optional="true" label="Maximum call stutter rate." help="PCR stutter artifacts add or remove copies of an STR's motif to sequencing reads, resulting in observed STR sizes that differ from the size of the underlying genotype. Computed as DSTUTTER/DP" />
                <param argument="--hipstr-min-supp-reads" type="integer" optional="true" label="Minimum supporting reads for each allele. Based on ALLREADS and GB fields" />
                <param argument="--hipstr-min-call-DP" type="integer" optional="true" label="Minimum call coverage. Based on DP field." />
                <param argument="--hipstr-max-call-DP" type="integer" optional="true" label="Maximum call coverage. Based on DP field." />
                <param argument="--hipstr-min-call-Q" type="float" optional="true" label="Minimum call quality score. Based on Q field." />
            </section>
            <section name="popstr_filters" title="PopSTR call-level filters" expanded="false">
                <param argument="--popstr-min-call-DP" type="integer" optional="true" label="Minimum call coverage. Based on DP field." />
                <param argument="--popstr-max-call-DP" type="integer" optional="true" label="Maximum call coverage. Based on DP field." />
                <param argument="--popstr-require-support" type="integer" optional="true" label="Require each allele call to have at least n supporting reads. Based on AD field." />
            </section>
        </section>
    </inputs>

    <outputs>
        <data name="stdout" label="STDOUT output" format="txt" />

        <data name="main_output" label="Main output" >
            <discover_datasets format="vcf" pattern="(?P&lt;designation&gt;.+)\.vcf" visible="true" assign_primary_output="true"/>
            <discover_datasets format="tabular" pattern="(?P&lt;designation&gt;.+)\.tab" visible="true"/>
        </data>

        <data name="stderr" label="STDERR output" format="txt" >
            <discover_datasets format="vcf_bgzip" pattern="(?P&lt;designation&gt;.+)\.vcf.gz" visible="true"/>
            <discover_datasets format="tabix" pattern="(?P&lt;designation&gt;.+)\.vcf.gz.tbi" visible="true"/>
        </data>

    </outputs>
    <tests>
    <test>
        <section name="main_params">
            <param name="vcf" value="NA12891_chr21_hipstr.sorted.vcf.gz"/>
            <param name="out" value="test_result"/>
            <param name="vcftype" value="hipstr"/>
            <param name="zip" value="false"/>
        </section>
        <section name="filter_opt">
            <param name="min_locus_callrate" value="0.1"/>
            <param name="use_length" value="true"/>
            <param name="drop_filtered" value="true"/>
        </section>
        <section name="filter_call_level">
            <section name="hipstr_filters">
                <param name="hipstr_max_call_flank_indel" value="0.2"/>
                <param name="hipstr_min_call_Q" value="0.4"/>
            </section>
        </section>

        <output name="stdout" file="stdout.txt"/>
    
        <output name="main_output">
            <discovered_dataset designation="test_result.loclog" file="test_result.loclog.tab" />
            <discovered_dataset designation="test_result.samplog" file="test_result.samplog.tab" />
            <discovered_dataset designation="test_result">
                <assert_contents>
                    <has_size value="4061730" delta="200" />
                    <has_text text="##fileformat=VCFv4.1" />
                    <has_n_lines n="9046" />
                </assert_contents>
            </discovered_dataset>
        </output>
        <output name="stderr" file="stderr.txt" />
           
    </test>
    
    </tests>

    <help>
        <![CDATA[Tool for filtering and QC of TR genotypes

    Input/output:
    --vcf VCF             Input STR VCF file
    --out OUT             Prefix for output files
    --zip                 Produce a bgzipped and tabix indexed output VCF (default: False)
    --vcftype VCFTYPE     Options=['gangstr', 'advntr', 'hipstr', 'eh', 'popstr'] (default: auto)

    Locus-level filters (tool agnostic):
    --min-locus-callrate MIN_LOCUS_CALLRATE
                            Minimum locus call rate
    --min-locus-hwep MIN_LOCUS_HWEP
                            Filter loci failing HWE at this p-value threshold
    --min-locus-het MIN_LOCUS_HET
                            Minimum locus heterozygosity
    --max-locus-het MAX_LOCUS_HET
                            Maximum locus heterozygosity
    --use-length          Calculate per-locus stats (het, HWE) collapsing alleles by length (default: False)
    --filter-regions FILTER_REGIONS
                            Comma-separated list of BED files of regions to filter. Must be bgzipped and tabix indexed
    --filter-regions-names FILTER_REGIONS_NAMES
                            Comma-separated list of filter names for each BED filter file
    --filter-hrun         Filter STRs with long homopolymer runs. (default: False)
    --drop-filtered       Drop filtered records from output (default: False)

    Call-level filters specific to HipSTR output:
    --hipstr-max-call-flank-indel HIPSTR_MAX_CALL_FLANK_INDEL
                            Maximum call flank indel rate
    --hipstr-max-call-stutter HIPSTR_MAX_CALL_STUTTER
                            Maximum call stutter rate
    --hipstr-min-supp-reads HIPSTR_MIN_SUPP_READS
                            Minimum supporting reads for each allele
    --hipstr-min-call-DP HIPSTR_MIN_CALL_DP
                            Minimum call coverage
    --hipstr-max-call-DP HIPSTR_MAX_CALL_DP
                            Maximum call coverage
    --hipstr-min-call-Q HIPSTR_MIN_CALL_Q
                            Minimum call quality score

    Call-level filters specific to GangSTR output:
    --gangstr-min-call-DP GANGSTR_MIN_CALL_DP
                            Minimum call coverage
    --gangstr-max-call-DP GANGSTR_MAX_CALL_DP
                            Maximum call coverage
    --gangstr-min-call-Q GANGSTR_MIN_CALL_Q
                            Minimum call quality score
    --gangstr-expansion-prob-het GANGSTR_EXPANSION_PROB_HET
                            Expansion prob-value threshold. Filters calls with probability of heterozygous expansion less than this
    --gangstr-expansion-prob-hom GANGSTR_EXPANSION_PROB_HOM
                            Expansion prob-value threshold. Filters calls with probability of homozygous expansion less than this
    --gangstr-expansion-prob-total GANGSTR_EXPANSION_PROB_TOTAL
                            Expansion prob-value threshold. Filters calls with probability of total expansion less than this
    --gangstr-filter-span-only
                            Filter out all calls that only have spanning read support (default: False)
    --gangstr-filter-spanbound-only
                            Filter out all reads except spanning and bounding (default: False)
    --gangstr-filter-badCI
                            Filter regions where the ML estimate is not in the CI (default: False)
    --gangstr-readlen GANGSTR_READLEN
                            Read length used (bp). Required if using --require-support

    Call-level filters specific to adVNTR output:
    --advntr-min-call-DP ADVNTR_MIN_CALL_DP
                            Minimum call coverage
    --advntr-max-call-DP ADVNTR_MAX_CALL_DP
                            Maximum call coverage
    --advntr-min-spanning ADVNTR_MIN_SPANNING
                            Minimum spanning read count (SR field)
    --advntr-min-flanking ADVNTR_MIN_FLANKING
                            Minimum flanking read count (FR field)
    --advntr-min-ML ADVNTR_MIN_ML
                            Minimum value of maximum likelihood (ML field)

    Call-level filters specific to ExpansionHunter output:
    --eh-min-ADFL EH_MIN_ADFL
                            Minimum number of flanking reads consistent with the allele
    --eh-min-ADIR EH_MIN_ADIR
                            Minimum number of in-repeat reads consistent with the allele
    --eh-min-ADSP EH_MIN_ADSP
                            Minimum number of spanning reads consistent with the allele
    --eh-min-call-LC EH_MIN_CALL_LC
                            Minimum call coverage
    --eh-max-call-LC EH_MAX_CALL_LC
                            Maximum call coverage

    Call-level filters specific to PopSTR output:
    --popstr-min-call-DP POPSTR_MIN_CALL_DP
                            Minimum call coverage
    --popstr-max-call-DP POPSTR_MAX_CALL_DP
                            Maximum call coverage
    --popstr-require-support POPSTR_REQUIRE_SUPPORT
                            Require each allele call to have at least n supporting reads

    Debugging parameters:
    --num-records NUM_RECORDS
                            Only process this many records
    --die-on-warning      Quit if a record can't be parsed (default: False)
    --verbose             Print out extra info (default: False)

    Version:
    --version             show program's version number and exit]]>
    </help>

<citations>
    <citation type="bibtex">
        @misc{TRTools: a toolkit for genome-wide analysis of tandem repeats,
        author = {Nima Mousavi, Jonathan Margoliash, Neha Pusarla, Shubham Saini, Richard Yanicky, Melissa Gymrek},
        year = {2020},
        title = {TRTools},
        publisher = {GitHub},
        journal = {GitHub repository},
        url = {https://github.com/gymreklab/trtools},
        }
    </citation>
</citations>
</tool>