<tool id="mergeSTR" name="MergeSTR - TRTools" version="@TRTOOLS_VERSION@" python_template_version="3.5">
    <description>MergeSTR merges multiple VCF files produced by the same TR genotyper into a single VCF file</description>
    <macros>
        <import>macros.xml</import>
    </macros>

    <expand macro="requirements"/>
    <command detect_errors="aggressive"><![CDATA[
        @INDEX_VCFS@
        #set $inputs = [str(vcf['vcf']) for vcf in $main_params.vcfs]
        #set $temp_inputs = $get_new_vcf_names($inputs)
        #set $indexed_inputs_comma_separated = ",".join($temp_inputs)
        
        $index_vcfs($inputs, $temp_inputs)

        mergeSTR
            --vcfs $indexed_inputs_comma_separated
            
            --out '$main_params.out'
            --vcftype $main_params.vcftype

            #if $other.update_sample_from_file:
                --update-sample-from-file
            #end if

            #if $other.verbose:
                --verbose
            #end if

            #if $other.quiet:
                --quiet
            #end if
            
            1> $stdout 2> $stderr

    ]]></command>
    <inputs>
        <section name="main_params" title="Most important parameters" expanded="true">
            
            <repeat name="vcfs" title="VCF files to merge">
                <param argument="--vcf" type="data" format="vcf_bgzip" label="VCF file" help="VCF file to analyze"/>
            </repeat>
            <param argument="--out" name="out" type="text" label="Output name prefix"
                   help="Output prefix for files generated"/>
             <param argument="--vcftype" name="vcftype" type="select" label="Variant caller type of input VCF" help="
                        Which type of VCF to restrict the input to, or 'auto' for no restrction (default: auto)">
                <option value="auto">Auto</option>
                <option value="gangstr">GangSTR</option>
                <option value="advntr">Advntr</option>
                <option value="hipstr">HipSTR</option>
                <option value="eh">Expansion hunter</option>
                <option value="popstr">PopSTR</option>
            </param>
        </section>
        <section name="other" title="Other options" expanded="false">

            <param argument="--update-sample-from-file" type="boolean" optional="true" label="Append file names to sample names." help="Append file names to sample names. Useful if sample names are repeated across VCF files." />
            <param argument="--verbose" type="boolean" optional="true" label="Prints out extra information"  />
            <param argument="--quiet" type="boolean" optional="true" label="Doesnâ€™t print out anything" />

        </section>
        

    </inputs>
    <outputs>
        <data name="stdout" label="STDOUT and output files" format="txt" >
             <discover_datasets format="vcf" pattern="(?P&lt;designation&gt;.+)\.vcf$" visible="true"/>
        </data>
        <data name="stderr" label="STDERR output" format="txt" />


    </outputs>

    <tests>
        
    <test>
        <section name="main_params">
            <param name="out" value="test_result"/>
            <param name="vcftype" value="hipstr"/>
            <repeat name="vcfs">
                <param name="vcf" value="NA12878_chr21_hipstr.sorted.vcf.gz"/>
            </repeat>
            <repeat name="vcfs">
                <param name="vcf" value="NA12891_chr21_hipstr.sorted.vcf.gz"/>
            </repeat>
        </section>
        <section name="other">
            <param name="verbose" value="true"/>
        </section>
        <output name="stdout" file="stdout.txt">
            <discovered_dataset designation="test_result">
                <!-- The vcf output itself can't be directly compared, because it contains the command that executed it, and that command is different for every run -->
                <assert_contents>
                    <has_size value="3106028" delta="100" />
                    <has_text text="##fileformat=VCFv4.1" />
                    <has_n_lines n="9695" />
                </assert_contents>
            </discovered_dataset>
        </output>
        <output name="stderr" file="stderr.txt" />
        
    </test>
    </tests>

    <help>
        <![CDATA[usage: 
        Tool for merging TR VCF files generated by
        the same TR genotyper.
        
        Required arguments:
          --vcfs VCFS           Comma-separated list of VCF files to merge (must be
                                sorted, bgzipped and indexed)
          --out OUT             Prefix to name output files
          --vcftype VCFTYPE     Options=['gangstr', 'advntr', 'hipstr', 'eh',
                                'popstr'] (default: auto)
        
        Special merge options:
          --update-sample-from-file
                                Use file names, rather than sample header names, when
                                merging (default: False)
        
        Optional arguments:
          --verbose             Print out extra info (default: False)
          --quiet               Don't print out anything (default: False)
        
        Version:
          --version             show program's version number and exit
        
        ]]>

    </help>


    <citations>
        <citation type="bibtex">
            @misc{TRTools: a toolkit for genome-wide analysis of tandem repeats,
            author = {Nima Mousavi, Jonathan Margoliash, Neha Pusarla, Shubham Saini, Richard Yanicky, Melissa Gymrek},
            year = {2020},
            title = {TRTools},
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/gymreklab/trtools},
            }
        </citation>
    </citations>
</tool>